//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SCGL.BAL;
using SW.SW_Common;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace SCGL.DAL
{
    
    
    public class DAL_Job
    {
        
        #region Constructor
        public DAL_Job()
        {
        }
        #endregion
        
        #region Public Method
        // =========================== Public Method =========================
        public virtual int Create(Job p)
        {
            try
            {
                SqlParameter[] SqlParam = new SqlParameter[] {
                        new SqlParameter("JobNumber", p.JobNumber),
                        new SqlParameter("JobDescription", p.JobDescription),
                        new SqlParameter("CustomerID", p.CustomerID),
                        new SqlParameter("ContactNo", p.ContactNo),
                        new SqlParameter("Container", p.Container),
                        new SqlParameter("ContainerNo", p.ContainerNo),
                        new SqlParameter("ContainerDate", p.ContainerDate),
                        new SqlParameter("IGMNo", p.IGMNo),
                        new SqlParameter("IGMDate", p.IGMDate),
                        new SqlParameter("IndexNo", p.IndexNo),
                        new SqlParameter("SS", p.SS),
                        new SqlParameter("QTY", p.QTY),
                        new SqlParameter("BECashNo", p.BECashNo),
                        new SqlParameter("MachineNo", p.MachineNo),
                        new SqlParameter("MachineDate", p.MachineDate),
                        new SqlParameter("DeliveryDate", p.DeliveryDate),
                        new SqlParameter("CNFValue", p.CNFValue),
                        new SqlParameter("ImportValue", p.ImportValue),
                        new SqlParameter("LCNo", p.LCNo),
                        new SqlParameter("BLNo", p.BLNo),
                        new SqlParameter("ShippingLineID", p.ShippingLineID),
                        new SqlParameter("StartDate", p.StartDate),
                        new SqlParameter("EndDate", p.EndDate),
                        new SqlParameter("Completed", p.Completed)};
                return Convert.ToInt32(SqlHelper.ExecuteScalar(SCGL_Common.ConnectionString, "VT_SP_Job_Insert", SqlParam));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public virtual Job Read(int p)
        {
            try
            {
                SqlParameter SqlParam = new SqlParameter("JobID", p);
                Job obj = new Job();
                using (SqlDataReader dr = SqlHelper.ExecuteReader(SCGL_Common.ConnectionString, "VT_SP_Job_Read", SqlParam))
                {
                obj = DataReader(dr);
                }
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual List<Job> ReadByJobNumber(string Number)
        {
            try
            {
                List<Job> obj = new List<Job>();
                string query = @"SELECT * FROM vt_SCGL_Job WHERE JobNumber LIKE @NUM+'%'";
                SqlParameter param = new SqlParameter("NUM", Number);
                using (SqlDataReader dr = SqlHelper.ExecuteReader(SCGL_Common.ConnectionString, CommandType.Text, query, param))
                {
                    obj = ListDataReader(dr);
                }
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual Job GetJobByJobNumber(string JobNumber)
        {
            try
            {                
                string query = @"SELECT j.*,c.DisplayName AS CustomerName FROM vt_SCGL_Job j
                                INNER JOIN vt_SCGL_Customer c on c.CustomerID =  j.CustomerID
                                WHERE JobNumber = @JobNumber";
                SqlParameter param = new SqlParameter("JobNumber", JobNumber);

                Job obj = new Job();
                using (SqlDataReader dr = SqlHelper.ExecuteReader(SCGL_Common.ConnectionString, CommandType.Text, query, param))
                {
                    obj = DataReader(dr);
                }
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public virtual DataTable ReadDataTable()
        {
            try
            {
                return SqlHelper.ExecuteDataset(SCGL_Common.ConnectionString, "VT_SP_Job_Read").Tables[0];
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public virtual List<Job> Read()
        {
            try
            {
                List<Job> obj = new List<Job>();
                using (SqlDataReader dr = SqlHelper.ExecuteReader(SCGL_Common.ConnectionString, "VT_SP_Job_Read"))
                {
                obj = ListDataReader(dr);
                }
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public virtual bool Update(Job p)
        {
            try
            {
                SqlParameter[] SqlParam = new SqlParameter[] {
                        new SqlParameter("JobID", p.JobID),
                        new SqlParameter("JobNumber", p.JobNumber),
                        new SqlParameter("JobDescription", p.JobDescription),
                        new SqlParameter("CustomerID", p.CustomerID),
                        new SqlParameter("ContactNo", p.ContactNo),
                        new SqlParameter("Container", p.Container),
                        new SqlParameter("ContainerNo", p.ContainerNo),
                        new SqlParameter("ContainerDate", p.ContainerDate),
                        new SqlParameter("IGMNo", p.IGMNo),
                        new SqlParameter("IGMDate", p.IGMDate),
                        new SqlParameter("IndexNo", p.IndexNo),
                        new SqlParameter("SS", p.SS),
                        new SqlParameter("QTY", p.QTY),
                        new SqlParameter("BECashNo", p.BECashNo),
                        new SqlParameter("MachineNo", p.MachineNo),
                        new SqlParameter("MachineDate", p.MachineDate),
                        new SqlParameter("DeliveryDate", p.DeliveryDate),
                        new SqlParameter("CNFValue", p.CNFValue),
                        new SqlParameter("ImportValue", p.ImportValue),
                        new SqlParameter("LCNo", p.LCNo),
                        new SqlParameter("BLNo", p.BLNo),
                        new SqlParameter("ShippingLineID", p.ShippingLineID),
                        new SqlParameter("StartDate", p.StartDate),
                        new SqlParameter("EndDate", p.EndDate),
                        new SqlParameter("Completed", p.Completed)};
                int i = SqlHelper.ExecuteNonQuery(SCGL_Common.ConnectionString, "VT_SP_Job_Update", SqlParam);
                return i >= 1;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public virtual bool Delete(int p)
        {
            try
            {
                SqlParameter SqlParam = new SqlParameter("JobID", p);
                int i = SqlHelper.ExecuteNonQuery(SCGL_Common.ConnectionString, "VT_SP_Job_Delete", SqlParam);
                return i >= 1;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        
        #region Helper Method
        // =========================== Helper Method =========================
        private Job DataReader(SqlDataReader dr)
        {
            Job obj = new Job();
            try
            {
                if (dr.Read())
                {
                    obj.JobID = SCGL_Common.CheckInt(dr["JobID"]);
                    obj.JobNumber = SCGL_Common.CheckString(dr["JobNumber"]);
                    obj.JobDescription = SCGL_Common.CheckString(dr["JobDescription"]);
                    obj.CustomerID = SCGL_Common.CheckInt(dr["CustomerID"]);
                    //if (dr["CustomerName"] != null)
                    //    obj.CustomerName = SCGL_Common.CheckString(dr["CustomerName"]);
                    obj.ContactNo = SCGL_Common.CheckString(dr["ContactNo"]);
                    obj.Container = SCGL_Common.CheckString(dr["Container"]);
                    obj.ContainerNo = SCGL_Common.CheckString(dr["ContainerNo"]);
                    obj.ContainerDate = SCGL_Common.CheckDateTime(dr["ContainerDate"]);
                    obj.IGMNo = SCGL_Common.CheckString(dr["IGMNo"]);
                    obj.IGMDate = SCGL_Common.CheckDateTime(dr["IGMDate"]);
                    obj.IndexNo = SCGL_Common.CheckString(dr["IndexNo"]);
                    obj.SS = SCGL_Common.CheckString(dr["SS"]);
                    obj.QTY = SCGL_Common.CheckString(dr["QTY"]);
                    obj.BECashNo = SCGL_Common.CheckString(dr["BECashNo"]);
                    obj.MachineNo = SCGL_Common.CheckString(dr["MachineNo"]);
                    obj.MachineDate = SCGL_Common.CheckDateTime(dr["MachineDate"]);
                    obj.DeliveryDate = SCGL_Common.CheckDateTime(dr["DeliveryDate"]);
                    obj.CNFValue = SCGL_Common.Convert_ToDecimal(dr["CNFValue"]);
                    obj.ImportValue = SCGL_Common.Convert_ToDecimal(dr["ImportValue"]);
                    obj.LCNo = SCGL_Common.CheckString(dr["LCNo"]);
                    obj.BLNo = SCGL_Common.CheckString(dr["BLNo"]);
                    obj.ShippingLineID = SCGL_Common.CheckInt(dr["ShippingLineID"]);
                    obj.StartDate = SCGL_Common.CheckDateTime(dr["StartDate"]);
                    obj.EndDate = SCGL_Common.CheckDateTime(dr["EndDate"]);
                    obj.Completed = SCGL_Common.CheckBoolean(dr["Completed"]);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return obj;
        }

        private List<Job> ListDataReader(SqlDataReader dr)
        {
            List<Job> objList = new List<Job>();
            try
            {
                while (dr.Read())
                {
                    Job obj = new Job();
                    obj.JobID = SCGL_Common.CheckInt(dr["JobID"]);
                    obj.JobNumber = SCGL_Common.CheckString(dr["JobNumber"]);
                    obj.JobDescription = SCGL_Common.CheckString(dr["JobDescription"]);
                    obj.CustomerID = SCGL_Common.CheckInt(dr["CustomerID"]);
                    if (HasColumn(dr, "CustomerName"))
                        obj.CustomerName = SCGL_Common.CheckString(dr["CustomerName"]);
                    obj.ContactNo = SCGL_Common.CheckString(dr["ContactNo"]);
                    obj.Container = SCGL_Common.CheckString(dr["Container"]);
                    obj.ContainerNo = SCGL_Common.CheckString(dr["ContainerNo"]);
                    obj.ContainerDate = SCGL_Common.CheckDateTime(dr["ContainerDate"]);
                    obj.IGMNo = SCGL_Common.CheckString(dr["IGMNo"]);
                    obj.IGMDate = SCGL_Common.CheckDateTime(dr["IGMDate"]);
                    obj.IndexNo = SCGL_Common.CheckString(dr["IndexNo"]);
                    obj.SS = SCGL_Common.CheckString(dr["SS"]);
                    obj.QTY = SCGL_Common.CheckString(dr["QTY"]);
                    obj.BECashNo = SCGL_Common.CheckString(dr["BECashNo"]);
                    obj.MachineNo = SCGL_Common.CheckString(dr["MachineNo"]);
                    obj.MachineDate = SCGL_Common.CheckDateTime(dr["MachineDate"]);
                    obj.DeliveryDate = SCGL_Common.CheckDateTime(dr["DeliveryDate"]);
                    obj.CNFValue = SCGL_Common.Convert_ToDecimal(dr["CNFValue"]);
                    obj.ImportValue = SCGL_Common.Convert_ToDecimal(dr["ImportValue"]);
                    obj.LCNo = SCGL_Common.CheckString(dr["LCNo"]);
                    obj.BLNo = SCGL_Common.CheckString(dr["BLNo"]);
                    obj.ShippingLineID = SCGL_Common.CheckInt(dr["ShippingLineID"]);
                    obj.StartDate = SCGL_Common.CheckDateTime(dr["StartDate"]);
                    obj.EndDate = SCGL_Common.CheckDateTime(dr["EndDate"]);
                    obj.Completed = SCGL_Common.CheckBoolean(dr["Completed"]);
                    objList.Add(obj);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return objList;
        }

         bool HasColumn(IDataRecord dr, string columnName)
        {
            for (int i = 0; i < dr.FieldCount; i++)
            {
                if (dr.GetName(i).Equals(columnName, StringComparison.InvariantCultureIgnoreCase))
                    return true;
            }
            return false;
        }
        #endregion

         public virtual int CheckExsistingJob(int JobID)
         {
             SqlParameter param = new SqlParameter("@JobID", JobID);
             return Convert.ToInt32(SqlHelper.ExecuteScalar(SCGL_Common.ConnectionString, "VT_SP_CheckExsistingJob", param));
         }

         public virtual int CheckExsistingJobNumber(string JobNumber)
         {
             SqlParameter param = new SqlParameter("@JobNumber", JobNumber);
             return Convert.ToInt32(SqlHelper.ExecuteScalar(SCGL_Common.ConnectionString, "VT_SP_CheckExsistingJobNumber", param));
         }
    }
}
